FuRegisterClass("Recenter",
    CT_Tool, {
        REGS_Name = "Recenter",
        REGS_Category = "Fuses\\Util\\Recenter",
        REGS_OpIconString = "Rcnt",
        REGS_OpDescription = "Translates the image to move the specified coordinate to a given location."
    }
)

function Create()
    Mode = self:AddInput("Operation", "Operation", {
        LINKID_DataType = "Number",
        INPID_InputControl = "MultiButtonControl",
        INP_Default = 0.0,
        { MBTNC_AddButton = "Source", MBTNCD_ButtonWidth = 0.50, },
        { MBTNC_AddButton = "Destination", MBTNCD_ButtonWidth = 0.50, },
        INP_DoNotifyChanged = true,
    })
    OldPixelLocation = self:AddInput("Original Pixel Location", "OriginalPixelLocation", {
        LINKID_DataType = "Point",
        INPID_InputControl = "OffsetControl",
        INPID_PreviewControl = "CrosshairControl",
        INP_DefaultX = 0.5,
        INP_DefaultY = 0.5,
    })
    NewPixelLocation = self:AddInput("New Pixel Location", "NewPixelLocation", {
        LINKID_DataType = "Point",
        INPID_InputControl = "OffsetControl",
        INPID_PreviewControl = "CrosshairControl",
        INP_DefaultX = 0.5,
        INP_DefaultY = 0.5,
    })
    InImage = self:AddInput("Input", "Input", {
        LINKID_DataType = "Image",
        LINK_Main = 1,

    })
    OutImage = self:AddOutput("Output", "Output", {
        LINKID_DataType = "Image",
        LINK_Main = 1,
    })
end

function NotifyChanged(inp, param, time)
    if inp == Mode and param.Value == 0 then
        NewPixelLocation:SetAttrs({
            PC_Visible = false,
        })
        OldPixelLocation:SetAttrs({
            PC_Visible = true,
        })
    elseif inp == Mode and param.Value == 1 then
        NewPixelLocation:SetAttrs({
            PC_Visible = true,
        })
        OldPixelLocation:SetAttrs({
            PC_Visible = false,
        })
    end
end

function Process(req)
    -- Get values from the UI Tools
    local old_pixel_location = OldPixelLocation:GetValue(req)
    local new_pixel_location = NewPixelLocation:GetValue(req)
    local mode = Mode:GetValue(req).Value
    local img = InImage:GetSource(req.Time)

    if mode == 1 then

        local out_img = img:Transform(nil, {
                XF_XOffset = new_pixel_location.X - old_pixel_location.X + 0.5,
                XF_YOffset = new_pixel_location.Y - old_pixel_location.Y + 0.5,
                XF_XAxis = 0.5,
                XF_YAxis = 0.5,
                XF_XSize = 1.0,
                XF_YSize = 1.0,
                XF_Angle = 0.0,
                XF_EdgeMode = "Canvas",
            }
        )
        OutImage:Set(req, out_img)
    else
        OutImage:Set(req, img)
    end
end
