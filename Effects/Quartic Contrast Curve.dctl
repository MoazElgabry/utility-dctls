DEFINE_UI_PARAMS(pivot, Pivot, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.01)
DEFINE_UI_PARAMS(toe, Toe, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.01)
DEFINE_UI_PARAMS(shoulder, Shoulder, DCTLUI_SLIDER_FLOAT, 0.5, 0.0, 1.0, 0.01)
DEFINE_UI_PARAMS(black_point, Black Point, DCTLUI_SLIDER_FLOAT, 0.0, -1.0, 1.0, 0.01)
DEFINE_UI_PARAMS(white_point, White Point, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.01)
DEFINE_UI_PARAMS(black_slope, Black Slope, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 3.0, 0.01)
DEFINE_UI_PARAMS(pivot_slope, Pivot Slope, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 3.0, 0.01)
DEFINE_UI_PARAMS(white_slope, White Slope, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 3.0, 0.01)
DEFINE_UI_PARAMS(show_curve, Show Curve, DCTLUI_CHECK_BOX, 0)


typedef struct {
    float a1, a2, a3, a4, a5;
} quartic_coefficients_t;

typedef struct {
    float black_x, black_y;
    float white_x, white_y;
    float toe_x, toe_y;
    float shoulder_x, shoulder_y;
    float pivot_x, pivot_y;
    float black_slope, pivot_slope, white_slope;
} curve_params_t;

__DEVICE__ float powi(float x, int exp) {
    float out = 1.0;
    for (int i = 0; i < exp; ++i) {
        out *= x;
    }
    return out;
}

// Fits three x,y coordinates, where the first and third ones have specific derivatives d1 and d3.
__DEVICE__ void fit_quartic(float x1, float y1, float x2, float y2, float x3, float y3, float d1, float d3, __PRIVATE__ quartic_coefficients_t* coeffs) {
    // this usually does the right thing, don't worry about it lol
    coeffs->a1 = (d1*powi(x1, 2)*powi(x2, 2) - 2*d1*powi(x1, 2)*x2*x3 + d1*powi(x1, 2)*powi(x3, 2) - d1*x1*powi(x2, 3) + d1*x1*powi(x2, 2)*x3 + d1*x1*x2*powi(x3, 2) - d1*x1*powi(x3, 3) + d1*powi(x2, 3)*x3 - 2*d1*powi(x2, 2)*powi(x3, 2) + d1*x2*powi(x3, 3) - d3*powi(x1, 3)*x2 + d3*powi(x1, 3)*x3 + 2*d3*powi(x1, 2)*powi(x2, 2) - d3*powi(x1, 2)*x2*x3 - d3*powi(x1, 2)*powi(x3, 2) - d3*x1*powi(x2, 3) - d3*x1*powi(x2, 2)*x3 + 2*d3*x1*x2*powi(x3, 2) + d3*powi(x2, 3)*x3 - d3*powi(x2, 2)*powi(x3, 2) + powi(x1, 3)*y2 - powi(x1, 3)*y3 - 3*powi(x1, 2)*x3*y2 + 3*powi(x1, 2)*x3*y3 - 3*x1*powi(x2, 2)*y1 + 3*x1*powi(x2, 2)*y3 + 6*x1*x2*x3*y1 - 6*x1*x2*x3*y3 - 3*x1*powi(x3, 2)*y1 + 3*x1*powi(x3, 2)*y2 + 2*powi(x2, 3)*y1 - 2*powi(x2, 3)*y3 - 3*powi(x2, 2)*x3*y1 + 3*powi(x2, 2)*x3*y3 + powi(x3, 3)*y1 - powi(x3, 3)*y2)/(powi(x1, 5)*powi(x2, 2) - 2*powi(x1, 5)*x2*x3 + powi(x1, 5)*powi(x3, 2) - 2*powi(x1, 4)*powi(x2, 3) + powi(x1, 4)*powi(x2, 2)*x3 + 4*powi(x1, 4)*x2*powi(x3, 2) - 3*powi(x1, 4)*powi(x3, 3) + powi(x1, 3)*powi(x2, 4) + 4*powi(x1, 3)*powi(x2, 3)*x3 - 8*powi(x1, 3)*powi(x2, 2)*powi(x3, 2) + 3*powi(x1, 3)*powi(x3, 4) - 3*powi(x1, 2)*powi(x2, 4)*x3 + 8*powi(x1, 2)*powi(x2, 2)*powi(x3, 3) - 4*powi(x1, 2)*x2*powi(x3, 4) - powi(x1, 2)*powi(x3, 5) + 3*x1*powi(x2, 4)*powi(x3, 2) - 4*x1*powi(x2, 3)*powi(x3, 3) - x1*powi(x2, 2)*powi(x3, 4) + 2*x1*x2*powi(x3, 5) - powi(x2, 4)*powi(x3, 3) + 2*powi(x2, 3)*powi(x3, 4) - powi(x2, 2)*powi(x3, 5));

    coeffs->a2 = (d1*(powi(x1, 4)*powi(x2, 2) - 2*powi(x1, 4)*x2*x3 + powi(x1, 4)*powi(x3, 2) - powi(x1, 2)*powi(x2, 4) + 4*powi(x1, 2)*x2*powi(x3, 3) - 3*powi(x1, 2)*powi(x3, 4) + 2*x1*powi(x2, 4)*x3 - 4*x1*powi(x2, 2)*powi(x3, 3) + 2*x1*powi(x3, 5) - powi(x2, 4)*powi(x3, 2) + 3*powi(x2, 2)*powi(x3, 4) - 2*x2*powi(x3, 5)) - d3*(2*powi(x1, 5)*x2 - 2*powi(x1, 5)*x3 - 3*powi(x1, 4)*powi(x2, 2) + 3*powi(x1, 4)*powi(x3, 2) + 4*powi(x1, 3)*powi(x2, 2)*x3 - 4*powi(x1, 3)*x2*powi(x3, 2) + powi(x1, 2)*powi(x2, 4) - powi(x1, 2)*powi(x3, 4) - 2*x1*powi(x2, 4)*x3 + 2*x1*x2*powi(x3, 4) + powi(x2, 4)*powi(x3, 2) - powi(x2, 2)*powi(x3, 4)) - 2*y1*(2*powi(x1, 3)*powi(x2, 2) - 4*powi(x1, 3)*x2*x3 + 2*powi(x1, 3)*powi(x3, 2) - x1*powi(x2, 4) + 4*x1*x2*powi(x3, 3) - 3*x1*powi(x3, 4) + powi(x2, 4)*x3 - 2*powi(x2, 2)*powi(x3, 3) + powi(x3, 5)) + 2*y2*(powi(x1, 5) - 3*powi(x1, 4)*x3 + 2*powi(x1, 3)*powi(x3, 2) + 2*powi(x1, 2)*powi(x3, 3) - 3*x1*powi(x3, 4) + powi(x3, 5)) - 2*y3*(powi(x1, 5) - 3*powi(x1, 4)*x3 - 2*powi(x1, 3)*powi(x2, 2) + 4*powi(x1, 3)*x2*x3 + 2*powi(x1, 2)*powi(x3, 3) + x1*powi(x2, 4) - 4*x1*x2*powi(x3, 3) - powi(x2, 4)*x3 + 2*powi(x2, 2)*powi(x3, 3)))/(-powi(x1, 6)*powi(x2, 2) + 2*powi(x1, 6)*x2*x3 - powi(x1, 6)*powi(x3, 2) + 2*powi(x1, 5)*powi(x2, 3) - 6*powi(x1, 5)*x2*powi(x3, 2) + 4*powi(x1, 5)*powi(x3, 3) - powi(x1, 4)*powi(x2, 4) - 6*powi(x1, 4)*powi(x2, 3)*x3 + 9*powi(x1, 4)*powi(x2, 2)*powi(x3, 2) + 4*powi(x1, 4)*x2*powi(x3, 3) - 6*powi(x1, 4)*powi(x3, 4) + 4*powi(x1, 3)*powi(x2, 4)*x3 + 4*powi(x1, 3)*powi(x2, 3)*powi(x3, 2) - 16*powi(x1, 3)*powi(x2, 2)*powi(x3, 3) + 4*powi(x1, 3)*x2*powi(x3, 4) + 4*powi(x1, 3)*powi(x3, 5) - 6*powi(x1, 2)*powi(x2, 4)*powi(x3, 2) + 4*powi(x1, 2)*powi(x2, 3)*powi(x3, 3) + 9*powi(x1, 2)*powi(x2, 2)*powi(x3, 4) - 6*powi(x1, 2)*x2*powi(x3, 5) - powi(x1, 2)*powi(x3, 6) + 4*x1*powi(x2, 4)*powi(x3, 3) - 6*x1*powi(x2, 3)*powi(x3, 4) + 2*x1*x2*powi(x3, 6) - powi(x2, 4)*powi(x3, 4) + 2*powi(x2, 3)*powi(x3, 5) - powi(x2, 2)*powi(x3, 6));

    coeffs->a3 = (-d1*(powi(x1, 4)*powi(x2, 3) - 3*powi(x1, 4)*x2*powi(x3, 2) + 2*powi(x1, 4)*powi(x3, 3) - powi(x1, 3)*powi(x2, 4) + 4*powi(x1, 3)*x2*powi(x3, 3) - 3*powi(x1, 3)*powi(x3, 4) + 3*x1*powi(x2, 4)*powi(x3, 2) - 4*x1*powi(x2, 3)*powi(x3, 3) + x1*powi(x3, 6) - 2*powi(x2, 4)*powi(x3, 3) + 3*powi(x2, 3)*powi(x3, 4) - x2*powi(x3, 6)) + d3*(powi(x1, 6)*x2 - powi(x1, 6)*x3 - 3*powi(x1, 4)*powi(x2, 3) + 3*powi(x1, 4)*powi(x3, 3) + 2*powi(x1, 3)*powi(x2, 4) + 4*powi(x1, 3)*powi(x2, 3)*x3 - 4*powi(x1, 3)*x2*powi(x3, 3) - 2*powi(x1, 3)*powi(x3, 4) - 3*powi(x1, 2)*powi(x2, 4)*x3 + 3*powi(x1, 2)*x2*powi(x3, 4) + powi(x2, 4)*powi(x3, 3) - powi(x2, 3)*powi(x3, 4)) + y1*(4*powi(x1, 3)*powi(x2, 3) - 12*powi(x1, 3)*x2*powi(x3, 2) + 8*powi(x1, 3)*powi(x3, 3) - 3*powi(x1, 2)*powi(x2, 4) + 12*powi(x1, 2)*x2*powi(x3, 3) - 9*powi(x1, 2)*powi(x3, 4) + 3*powi(x2, 4)*powi(x3, 2) - 4*powi(x2, 3)*powi(x3, 3) + powi(x3, 6)) - y2*(powi(x1, 6) - 9*powi(x1, 4)*powi(x3, 2) + 16*powi(x1, 3)*powi(x3, 3) - 9*powi(x1, 2)*powi(x3, 4) + powi(x3, 6)) + y3*(powi(x1, 6) - 9*powi(x1, 4)*powi(x3, 2) - 4*powi(x1, 3)*powi(x2, 3) + 12*powi(x1, 3)*x2*powi(x3, 2) + 8*powi(x1, 3)*powi(x3, 3) + 3*powi(x1, 2)*powi(x2, 4) - 12*powi(x1, 2)*x2*powi(x3, 3) - 3*powi(x2, 4)*powi(x3, 2) + 4*powi(x2, 3)*powi(x3, 3)))/(-powi(x1, 6)*powi(x2, 2) + 2*powi(x1, 6)*x2*x3 - powi(x1, 6)*powi(x3, 2) + 2*powi(x1, 5)*powi(x2, 3) - 6*powi(x1, 5)*x2*powi(x3, 2) + 4*powi(x1, 5)*powi(x3, 3) - powi(x1, 4)*powi(x2, 4) - 6*powi(x1, 4)*powi(x2, 3)*x3 + 9*powi(x1, 4)*powi(x2, 2)*powi(x3, 2) + 4*powi(x1, 4)*x2*powi(x3, 3) - 6*powi(x1, 4)*powi(x3, 4) + 4*powi(x1, 3)*powi(x2, 4)*x3 + 4*powi(x1, 3)*powi(x2, 3)*powi(x3, 2) - 16*powi(x1, 3)*powi(x2, 2)*powi(x3, 3) + 4*powi(x1, 3)*x2*powi(x3, 4) + 4*powi(x1, 3)*powi(x3, 5) - 6*powi(x1, 2)*powi(x2, 4)*powi(x3, 2) + 4*powi(x1, 2)*powi(x2, 3)*powi(x3, 3) + 9*powi(x1, 2)*powi(x2, 2)*powi(x3, 4) - 6*powi(x1, 2)*x2*powi(x3, 5) - powi(x1, 2)*powi(x3, 6) + 4*x1*powi(x2, 4)*powi(x3, 3) - 6*x1*powi(x2, 3)*powi(x3, 4) + 2*x1*x2*powi(x3, 6) - powi(x2, 4)*powi(x3, 4) + 2*powi(x2, 3)*powi(x3, 5) - powi(x2, 2)*powi(x3, 6));

    coeffs->a4 = (-2*d1*powi(x1, 3)*powi(x2, 3)*x3 + 3*d1*powi(x1, 3)*powi(x2, 2)*powi(x3, 2) - d1*powi(x1, 3)*powi(x3, 4) + 2*d1*powi(x1, 2)*powi(x2, 4)*x3 - 2*d1*powi(x1, 2)*powi(x2, 3)*powi(x3, 2) - d1*powi(x1, 2)*powi(x2, 2)*powi(x3, 3) + d1*powi(x1, 2)*powi(x3, 5) - d1*x1*powi(x2, 4)*powi(x3, 2) + 2*d1*x1*powi(x2, 3)*powi(x3, 3) - d1*x1*powi(x2, 2)*powi(x3, 4) - d1*powi(x2, 4)*powi(x3, 3) + 2*d1*powi(x2, 3)*powi(x3, 4) - d1*powi(x2, 2)*powi(x3, 5) + d3*powi(x1, 5)*powi(x2, 2) - d3*powi(x1, 5)*powi(x3, 2) - 2*d3*powi(x1, 4)*powi(x2, 3) + d3*powi(x1, 4)*powi(x2, 2)*x3 + d3*powi(x1, 4)*powi(x3, 3) + d3*powi(x1, 3)*powi(x2, 4) - 2*d3*powi(x1, 3)*powi(x2, 3)*x3 + d3*powi(x1, 3)*powi(x2, 2)*powi(x3, 2) + d3*powi(x1, 2)*powi(x2, 4)*x3 + 2*d3*powi(x1, 2)*powi(x2, 3)*powi(x3, 2) - 3*d3*powi(x1, 2)*powi(x2, 2)*powi(x3, 3) - 2*d3*x1*powi(x2, 4)*powi(x3, 2) + 2*d3*x1*powi(x2, 3)*powi(x3, 3) - 2*powi(x1, 5)*x3*y2 + 2*powi(x1, 5)*x3*y3 + 4*powi(x1, 4)*powi(x3, 2)*y2 - 4*powi(x1, 4)*powi(x3, 2)*y3 + 8*powi(x1, 2)*powi(x2, 3)*x3*y1 - 8*powi(x1, 2)*powi(x2, 3)*x3*y3 - 12*powi(x1, 2)*powi(x2, 2)*powi(x3, 2)*y1 + 12*powi(x1, 2)*powi(x2, 2)*powi(x3, 2)*y3 + 4*powi(x1, 2)*powi(x3, 4)*y1 - 4*powi(x1, 2)*powi(x3, 4)*y2 - 6*x1*powi(x2, 4)*x3*y1 + 6*x1*powi(x2, 4)*x3*y3 + 8*x1*powi(x2, 3)*powi(x3, 2)*y1 - 8*x1*powi(x2, 3)*powi(x3, 2)*y3 - 2*x1*powi(x3, 5)*y1 + 2*x1*powi(x3, 5)*y2)/(powi(x1, 5)*powi(x2, 2) - 2*powi(x1, 5)*x2*x3 + powi(x1, 5)*powi(x3, 2) - 2*powi(x1, 4)*powi(x2, 3) + powi(x1, 4)*powi(x2, 2)*x3 + 4*powi(x1, 4)*x2*powi(x3, 2) - 3*powi(x1, 4)*powi(x3, 3) + powi(x1, 3)*powi(x2, 4) + 4*powi(x1, 3)*powi(x2, 3)*x3 - 8*powi(x1, 3)*powi(x2, 2)*powi(x3, 2) + 3*powi(x1, 3)*powi(x3, 4) - 3*powi(x1, 2)*powi(x2, 4)*x3 + 8*powi(x1, 2)*powi(x2, 2)*powi(x3, 3) - 4*powi(x1, 2)*x2*powi(x3, 4) - powi(x1, 2)*powi(x3, 5) + 3*x1*powi(x2, 4)*powi(x3, 2) - 4*x1*powi(x2, 3)*powi(x3, 3) - x1*powi(x2, 2)*powi(x3, 4) + 2*x1*x2*powi(x3, 5) - powi(x2, 4)*powi(x3, 3) + 2*powi(x2, 3)*powi(x3, 4) - powi(x2, 2)*powi(x3, 5));

    coeffs->a5 = (d1*powi(x1, 3)*powi(x2, 3)*powi(x3, 2) - 2*d1*powi(x1, 3)*powi(x2, 2)*powi(x3, 3) + d1*powi(x1, 3)*x2*powi(x3, 4) - d1*powi(x1, 2)*powi(x2, 4)*powi(x3, 2) + d1*powi(x1, 2)*powi(x2, 3)*powi(x3, 3) + d1*powi(x1, 2)*powi(x2, 2)*powi(x3, 4) - d1*powi(x1, 2)*x2*powi(x3, 5) + d1*x1*powi(x2, 4)*powi(x3, 3) - 2*d1*x1*powi(x2, 3)*powi(x3, 4) + d1*x1*powi(x2, 2)*powi(x3, 5) - d3*powi(x1, 5)*powi(x2, 2)*x3 + d3*powi(x1, 5)*x2*powi(x3, 2) + 2*d3*powi(x1, 4)*powi(x2, 3)*x3 - d3*powi(x1, 4)*powi(x2, 2)*powi(x3, 2) - d3*powi(x1, 4)*x2*powi(x3, 3) - d3*powi(x1, 3)*powi(x2, 4)*x3 - d3*powi(x1, 3)*powi(x2, 3)*powi(x3, 2) + 2*d3*powi(x1, 3)*powi(x2, 2)*powi(x3, 3) + d3*powi(x1, 2)*powi(x2, 4)*powi(x3, 2) - d3*powi(x1, 2)*powi(x2, 3)*powi(x3, 3) + powi(x1, 5)*powi(x2, 2)*y3 - 2*powi(x1, 5)*x2*x3*y3 + powi(x1, 5)*powi(x3, 2)*y2 - 2*powi(x1, 4)*powi(x2, 3)*y3 + powi(x1, 4)*powi(x2, 2)*x3*y3 + 4*powi(x1, 4)*x2*powi(x3, 2)*y3 - 3*powi(x1, 4)*powi(x3, 3)*y2 + powi(x1, 3)*powi(x2, 4)*y3 + 4*powi(x1, 3)*powi(x2, 3)*x3*y3 - 8*powi(x1, 3)*powi(x2, 2)*powi(x3, 2)*y3 + 3*powi(x1, 3)*powi(x3, 4)*y2 - 3*powi(x1, 2)*powi(x2, 4)*x3*y3 - 4*powi(x1, 2)*powi(x2, 3)*powi(x3, 2)*y1 + 4*powi(x1, 2)*powi(x2, 3)*powi(x3, 2)*y3 + 8*powi(x1, 2)*powi(x2, 2)*powi(x3, 3)*y1 - 4*powi(x1, 2)*x2*powi(x3, 4)*y1 - powi(x1, 2)*powi(x3, 5)*y2 + 3*x1*powi(x2, 4)*powi(x3, 2)*y1 - 4*x1*powi(x2, 3)*powi(x3, 3)*y1 - x1*powi(x2, 2)*powi(x3, 4)*y1 + 2*x1*x2*powi(x3, 5)*y1 - powi(x2, 4)*powi(x3, 3)*y1 + 2*powi(x2, 3)*powi(x3, 4)*y1 - powi(x2, 2)*powi(x3, 5)*y1)/(powi(x1, 5)*powi(x2, 2) - 2*powi(x1, 5)*x2*x3 + powi(x1, 5)*powi(x3, 2) - 2*powi(x1, 4)*powi(x2, 3) + powi(x1, 4)*powi(x2, 2)*x3 + 4*powi(x1, 4)*x2*powi(x3, 2) - 3*powi(x1, 4)*powi(x3, 3) + powi(x1, 3)*powi(x2, 4) + 4*powi(x1, 3)*powi(x2, 3)*x3 - 8*powi(x1, 3)*powi(x2, 2)*powi(x3, 2) + 3*powi(x1, 3)*powi(x3, 4) - 3*powi(x1, 2)*powi(x2, 4)*x3 + 8*powi(x1, 2)*powi(x2, 2)*powi(x3, 3) - 4*powi(x1, 2)*x2*powi(x3, 4) - powi(x1, 2)*powi(x3, 5) + 3*x1*powi(x2, 4)*powi(x3, 2) - 4*x1*powi(x2, 3)*powi(x3, 3) - x1*powi(x2, 2)*powi(x3, 4) + 2*x1*x2*powi(x3, 5) - powi(x2, 4)*powi(x3, 3) + 2*powi(x2, 3)*powi(x3, 4) - powi(x2, 2)*powi(x3, 5));
}

__DEVICE__ float apply_quartic(float x, __PRIVATE__ quartic_coefficients_t* coeffs) {
    return coeffs->a1 * powi(x, 4) + coeffs->a2 * powi(x, 3) + coeffs->a3 * powi(x, 2) + coeffs->a4 * x + coeffs->a5;
}

__DEVICE__ float apply_curve_params(float x, __PRIVATE__ curve_params_t* curve, __PRIVATE__ quartic_coefficients_t* shadows, __PRIVATE__ quartic_coefficients_t* highlights) {
    float output;
    if (x <= curve->black_x) {
        output = curve->black_y;
    } else if (x >= curve->white_x) {
        output = curve->white_y;
    } else if (x > curve->pivot_x) {
        output = 1.0 - apply_quartic(1.0 - x, highlights);
    } else {
        output = apply_quartic(x, shadows);
    }
    return output;
}

__DEVICE__ inline float3 _max3(float3 x, float3 y) {
    float3 output = make_float3(_fmaxf(x.x, y.x), _fmaxf(x.y, y.y), _fmaxf(x.z, y.z));
    return output;
}

__DEVICE__ float3 draw_contrast_curve(__PRIVATE__ curve_params_t* contrast, __PRIVATE__ quartic_coefficients_t* shadows, __PRIVATE__ quartic_coefficients_t* highlights, float x, float y, float3 curr_color) {
    float y_val = apply_curve_params(x, contrast, shadows, highlights);
    float3 output_color = curr_color;
    float diff = _fabs(y_val - y);
    if (diff <= 0.002) {
        output_color = make_float3(1.0, 1.0, 1.0);
    }
    return output_color;
}

__DEVICE__ float3 draw_grid_lines(float x, float y, float3 curr_color) {
    float major_line_x = _fabs(_fmod(x + 0.1, 0.2) - 0.1);
    float minor_line_x = _fabs(_fmod(x + 0.02, 1.0 / 25.0) - 0.02);
    float major_line_y = _fabs(_fmod(y + 0.1, 0.2) - 0.1);
    float minor_line_y = _fabs(_fmod(y + 0.02, 1.0 / 25.0) - 0.02);

    float3 output_color = curr_color;
    if (0 < x && x < 1.0 && 0 < y && y < 1.0 && (major_line_x <= 0.002 || major_line_y <= 0.002)) {
        output_color += 0.1;
    }
    if (0 < x && x < 1.0 && 0 < y && y < 1.0 && (minor_line_x <= 0.001 || minor_line_y <= 0.001)) {
        output_color += 0.05;
    }
    return output_color;
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {

    curve_params_t curve_params = {
        0.0, black_point,
        1.0, white_point,
        pivot / 2.0, toe * (pivot - black_point) + black_point,
        (1.0 + pivot) / 2.0, shoulder * (white_point - pivot) + pivot,
        pivot, pivot,
        black_slope, pivot_slope, white_slope
    };

    quartic_coefficients_t shadows = {
        0.0, 0.0, 0.0, 0.0, 0.0
    };

    quartic_coefficients_t highlights = {
        0.0, 0.0, 0.0, 0.0, 0.0
    };

    fit_quartic(
        curve_params.black_x, curve_params.black_y,
        curve_params.toe_x, curve_params.toe_y,
        curve_params.pivot_x, curve_params.pivot_x,
        curve_params.black_slope,
        curve_params.pivot_slope,
        &shadows
    );
    // No clue why I have to do this honestly, but otherwise high pivots were problematic.
    fit_quartic(
        1.0 - curve_params.pivot_x, 1.0 - curve_params.pivot_x,
        1.0 - curve_params.shoulder_x, 1.0 - curve_params.shoulder_y,
        1.0 - curve_params.white_x, 1.0 - curve_params.white_y,
        curve_params.pivot_slope,
        curve_params.white_slope,
        &highlights
    );

    float3 output_color = make_float3(
        apply_curve_params(p_R, &curve_params, &shadows, &highlights),
        apply_curve_params(p_G, &curve_params, &shadows, &highlights),
        apply_curve_params(p_B, &curve_params, &shadows, &highlights)
    );

    // Drawing grid lines and the contrast curve.
    float x = (float)p_X / p_Width;
    x = (x - 0.5) * p_Width / p_Height + 0.5;
    float y = 1.0 - (float)p_Y / p_Height;
    if (show_curve) {
        float3 curve_line = draw_contrast_curve(&curve_params, &shadows, &highlights, x, y, output_color);
        float3 grid_line = draw_grid_lines(x, y, output_color);
        output_color = _max3(curve_line, grid_line);
    }

    return output_color;
}